---
- name: Create temporary directory
  delegate_to: localhost
  ansible.builtin.tempfile:
    state: directory
  register: download

- name: Download runc executable
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ containerd_runc_url }}"
    timeout: 90
    dest: "{{ download.path }}/runc"
    mode: "755"
  async: 90
  poll: 0
  register: runc_download

- name: Download containerd binary archive
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ containerd_url }}"
    timeout: 90
    dest: "{{ download.path }}/{{ containerd_archive }}"
    mode: "644"
  async: 90
  poll: 0
  register: containerd_download

- name: Download containerd service file
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ containerd_service_url }}"
    timeout: 90
    dest: "{{ download.path }}/containerd.service"
    mode: "644"
  async: 90
  poll: 0
  register: containerd_service_download

- name: Download CNI plugins archive
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ containerd_cni_plugins_url }}"
    timeout: 90
    dest: "{{ download.path }}/{{ containerd_cni_plugins_archive }}"
    mode: "644"
  async: 90
  poll: 0
  register: cni_plugins_download

- name: Wait for runc download to finish
  delegate_to: localhost
  ansible.builtin.async_status:
    jid: "{{ runc_download.ansible_job_id }}"
  register: wait_runc_download
  until: wait_runc_download.finished
  retries: 10
  delay: 10

- name: Install runc
  become: true
  ansible.builtin.copy:
    src: "{{ download.path }}/runc"
    dest: /usr/local/sbin/runc
    mode: "755"

- name: Create a runc symlink for root access
  become: true
  ansible.builtin.file:
    src: /usr/local/sbin/runc
    dest: /usr/bin/runc
    state: link
    mode: "755"

- name: Wait for containerd binary archive download to finish
  delegate_to: localhost
  ansible.builtin.async_status:
    jid: "{{ containerd_download.ansible_job_id }}"
  register: wait_containerd_download
  until: wait_containerd_download.finished
  retries: 10
  delay: 10

- name: Extract containerd binary archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ download.path }}/{{ containerd_archive }}"
    dest: /usr/local/
    mode: "755"

- name: Create symlink to binaries for root access
  become: true
  ansible.builtin.file:
    src: /usr/local/bin/{{ item }}
    dest: /usr/bin/{{ item }}
    state: link
    mode: "755"
  loop:
    - containerd
    - ctr

- name: Wait for containerd service file download to finish
  delegate_to: localhost
  ansible.builtin.async_status:
    jid: "{{ containerd_service_download.ansible_job_id }}"
  register: wait_containerd_service_download
  until: wait_containerd_service_download.finished
  retries: 10
  delay: 10

- name: Install containerd service
  become: true
  ansible.builtin.copy:
    src: "{{ download.path }}/containerd.service"
    dest: /usr/lib/systemd/system/containerd.service
    mode: "644"

- name: Load service
  become: true
  ansible.builtin.systemd_service:
    daemon_reload: true
    name: containerd
    enabled: true
    state: started

- name: Create CNI plugins directory
  become: true
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: "755"

- name: Wait for CNI plugins download to finish
  delegate_to: localhost
  ansible.builtin.async_status:
    jid: "{{ cni_plugins_download.ansible_job_id }}"
  register: wait_cni_plugins_download
  until: wait_cni_plugins_download.finished
  retries: 10
  delay: 10

- name: Extract CNI plugins archive
  become: true
  ansible.builtin.unarchive:
    src: "{{ download.path }}/{{ containerd_cni_plugins_archive }}"
    dest: /opt/cni/bin/
    mode: "755"
